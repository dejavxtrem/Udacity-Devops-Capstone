# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1


orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.4.0
  docker: circleci/docker@2.0.1


commands:
  destroy-cluster:
    description: Destroy EKS Cluster.
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string

    steps:
      - run:
          name: Destroy Environments
          command: |
             aws cloudformation delete-stack --stack-name eksctl-<< parameters.cluster-name >>-cluster --region us-east-2

jobs:
  # Lintcheck
  lintcheck:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: python:3.7.3-stretch
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python3 -m venv ~/.capstone
            source  ~/.capstone/bin/activate
            ls -l
            make install
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint

      - save_cache:
          paths:
            - .~/.capstone
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      - run:
          name: run lint
          command: |
            pwd
            source  ~/.capstone/bin/activate
            ls -l
            make lint
  # Docker Push frontend
  build-Docker-Push-frontend:
    machine: true
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: build frontend Image
          command: |
            # build frontend image and tag it.
            cd frontend
            docker build -t dejavxtrem/frontend .
            docker tag dejavxtrem/frontend dejavxtrem/frontend:latest
      - run:
          name: push frontend image to Docker hub
          command: |
            docker image ls
            docker login -u $DOCKER_USERNAME --password $DOCKER_PASSWORD
            docker push dejavxtrem/frontend:latest
  # Docker push Backend
  build-Docker-Push-backend:
    machine: true
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: build backend Image
          command: |
            # build backend image and tag it.
            cd backend
            docker build -t dejavxtrem/backend .
            docker tag dejavxtrem/backend dejavxtrem/backend:latest
      - run:
          name: push frontend image to Docker hub
          command: |
            docker image ls
            docker login -u $DOCKER_USERNAME --password $DOCKER_PASSWORD
            docker push dejavxtrem/backend:latest
 # build reverse proxy
  build-Docker-reverseproxy:
    machine: true
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: build backend Image
          command: |
            # build backend image and tag it.
            cd deployments
            docker build -t dejavxtrem/reverseproxy_udacity .
            docker tag dejavxtrem/reverseproxy_udacity dejavxtrem/reverseproxy_udacity:latest
      - run:
          name: push reverse proxy image to Docker hub
          command: |
            docker image ls
            docker login -u $DOCKER_USERNAME --password $DOCKER_PASSWORD
            docker push dejavxtrem/reverseproxy_udacity:latest

 # Create Cluster
  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          node-type: t2.large


  # Create Deployment frontend
  create-deployment-frontend:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: false
          resource-file-path: deployments/frontend/frontend-Deployment.yaml
          resource-name: deployments/frontend

# Create deployment backend
  create-deployment-backend:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: false
          resource-file-path: deployments/backend/backend-Deployment.yaml
          resource-name: deployments/backend


# create deployment reverseproxy
  create-deployment-reverseproxy:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: false
          resource-file-path: deployments/reverseproxy/reverse-Deployment.yaml
          resource-name: deployments/reverseproxy

  # Get k8 deployment and cluster details
  test-cluster-details:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region:  $AWS_REGION
      - run:
          name: check k8 servers and deployment details
          command: |
            echo "Getting different cluster details"
            kubectl get services
            kubectl get pods
            kubectl describe pods
            kubectl get nodes
            kubectl get deployment
            kubectl get services -o wide
workflows:
  deployments:
    jobs:
      - lintcheck
      - build-Docker-reverseproxy-udagram:
          requires:
            - lintcheck
      - build-Docker-Push-frontend:
          requires:
            - build-Docker-reverseproxy-udagram
      - build-Docker-Push-backend:
          requires:
            - build-Docker-Push-frontend
      - create-cluster:
          cluster-name: capstone-devpos-cluster
          requires:
            - build-Docker-Push-backend 
      - create-deployment-frontend:
          cluster-name: capstone-devpos-cluster
          requires:
            - create-cluster
      - create-deployment-backend:
          cluster-name: capstone-devpos-cluster
          requires:
            - create-deployment-frontend
      - create-deployment-reverseproxy:
          cluster-name: capstone-devpos-cluster
          requires:
            - create-deployment-backend
      - test-cluster-details:
          cluster-name: capstone-devpos-cluster