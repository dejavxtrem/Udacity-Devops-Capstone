# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1


orbs:
  aws-eks: circleci/aws-eks@2.1.1
  kubernetes: circleci/kubernetes@0.4.0
  docker: circleci/docker@2.0.1


commands:
  destroy-cluster:
    description: Destroy EKS Cluster.
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string

    steps:
      - run:
          name: Destroy Environments
          command: |
             aws cloudformation delete-stack --stack-name eksctl-<< parameters.cluster-name >>-cluster --region us-east-2

jobs:
  lintcheck:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: python:3.7.3-stretch
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python3 -m venv ~/.capstone
            source  ~/.capstone/bin/activate
            ls -l
            make install
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint

      - save_cache:
          paths:
            - .~/.capstone
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      - run:
          name: run lint
          command: |
            pwd
            source  ~/.capstone/bin/activate
            ls -l
            make lint

  build-Docker-Push-frontend:
    machine: true
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: build frontend Image
          command: |
            # build frontend image and tag it.
            cd frontend
            docker build -t dejavxtrem/frontend .
            docker tag dejavxtrem/frontend dejavxtrem/frontend:latest
      - run:
          name: push frontend image to Docker hub
          command: |
            docker image ls
            docker login -u $DOCKER_USERNAME --password $DOCKER_PASSWORD
            docker push dejavxtrem/frontend:latest

  build-Docker-Push-backend:
    machine: true
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: build backend Image
          command: |
            # build backend image and tag it.
            cd backend
            docker build -t dejavxtrem/backend .
            docker tag dejavxtrem/backend dejavxtrem/backend:latest
      - run:
          name: push frontend image to Docker hub
          command: |
            docker image ls
            docker login -u $DOCKER_USERNAME --password $DOCKER_PASSWORD
            docker push dejavxtrem/backend:latest

  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/install-aws-iam-authenticator:
          cluster-name: << parameters.cluster-name >>
          node-type: t2.medium

workflows:
  deployments:
    jobs:
      - lintcheck
      - build-Docker-Push-frontend:
          requires:
            - lintcheck
      - build-Docker-Push-backend:
          requires:
            - build-Docker-Push-frontend
      - create-cluster:
          cluster-name: capstone-devpos-cluster
          requires:
            - build-Docker-Push-backend 